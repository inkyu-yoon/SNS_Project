package likelion.sns.service;

import likelion.sns.Exception.ErrorCode;
import likelion.sns.Exception.SNSAppException;
import likelion.sns.domain.dto.alarm.AlarmListDetailsDto;
import likelion.sns.domain.entity.Alarm;
import likelion.sns.domain.entity.Post;
import likelion.sns.domain.entity.User;
import likelion.sns.repository.AlarmCustomRepositoryImpl;
import likelion.sns.repository.AlarmRepository;
import likelion.sns.repository.PostRepository;
import likelion.sns.repository.UserRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.ArrayList;
import java.util.List;

@Service
@Transactional(readOnly = true)
@RequiredArgsConstructor
@Slf4j
public class AlarmService {

    private final AlarmRepository alarmRepository;
    private final UserRepository userRepository;
    private final PostRepository postRepository;

    private final AlarmCustomRepositoryImpl alarmCustomRepository;

    /**
     * ÏïåÎ¶º Î™©Î°ù ÌôïÏù∏
     */
    public List<AlarmListDetailsDto> getAlarms(String requestUserName, Pageable pageable) {
        //user Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨ÌïòÍ≥† Ï∞æÏïÑÏò§Í∏∞
        User requestUser = userValid(requestUserName);

        List<AlarmListDetailsDto> result = alarmCustomRepository.getAlarmListByUserId(requestUser.getId());
        log.info("üîîÏïåÎ¶º Ï°∞Ìöå ÎÅù userName : {}");
        return result;
    }
    /**
     *
     * ÏïåÎ¶º ÏÇ≠Ï†ú (Ìó§ÎçîÏóêÏÑú ‚úîÌôïÏù∏ Ï≤¥ÌÅ¨Ïãú)
     */
    @Transactional
    public void deleteAlarm(String requestUserName, Long alarmId) {

        userValid(requestUserName);

        Alarm foundAlarm = alarmRepository.findById(alarmId)
                .orElseThrow(() -> new SNSAppException(ErrorCode.ALARM_NOT_FOUND));

        alarmRepository.delete(foundAlarm);
    }

    /**
     * ÏïåÎ¶º ÏÇ≠Ï†ú (Í≤åÏãúÍ∏ÄÏù¥ soft deleteÎêòÎ©¥, Ìï¥Îãπ Ìè¨Ïä§Ìä∏Ïóê ÎåÄÌïú ÏïåÎ¶ºÏùÑ Î™®Îëê ÏÇ≠Ï†ú)
     */
    @Transactional
    public void deleteAlarmWithPost(Long postId) {
        alarmRepository.deleteAlarmWithPost(postId);
    }



    /*
    ÏïÑÎûò Î©îÏÑúÎìúÎäî Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨ Î∞è Ï§ëÎ≥µ Î©îÏÑúÎìú Ï†ïÎ¶¨
     */

    /**
     * Ìï¥ÎãπÌïòÎäî ÌöåÏõêÏù¥ ÏóÜÏùÑ Ïãú, ÏòàÏô∏ Ï≤òÎ¶¨
     */
    public User userValid(String userName) {
        return userRepository.findByUserName(userName)
                .orElseThrow(() -> new SNSAppException(ErrorCode.USERNAME_NOT_FOUND));
    }

    /**
     * Ìï¥ÎãπÌïòÎäî Í≤åÏãúÍ∏ÄÏù¥ ÏóÜÏùÑ Ïãú, Í∑∏Î¶¨Í≥† deletedAt Îç∞Ïù¥ÌÑ∞Í∞Ä ÏûàÏùÑ Ïãú(ÏÇ≠Ï†ú Ï≤òÎ¶¨ Îêú Í≤ÉÏúºÎ°ú Î≥º Ïàò ÏûàÏúºÎØÄÎ°ú) ÏòàÏô∏ Ï≤òÎ¶¨
     */
    public Post postValid(Long postId) {

        //DBÏóê Ï†ÄÏû•ÎêòÏñ¥ ÏûàÎäî Í≤åÏãúÍ∏ÄÏù¥ ÏóÜÎäî Í≤ΩÏö∞
        Post foundPost = postRepository.findById(postId)
                .orElseThrow(() -> new SNSAppException(ErrorCode.POST_NOT_FOUND));

        // deletedAt Ïóê Îç∞Ïù¥ÌÑ∞Í∞Ä Ï±ÑÏõåÏ†∏ÏÑú ÏÇ≠Ï†ú Ï≤òÎ¶¨Í∞Ä Îêú Í≤ΩÏö∞
        if (foundPost.getDeletedAt() != null) {
            throw new SNSAppException(ErrorCode.POST_NOT_FOUND);
        }

        return foundPost;
    }

}
