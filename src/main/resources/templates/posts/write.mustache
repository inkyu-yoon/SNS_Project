{{>layouts/header}}
<form class="container">
    <div class="form-group" align="center">
        <h2><strong>제목</strong></h2>
        <input name="title" type="text" class="form-control" id="input-title" placeholder="제목을 입력하세요">
    </div>
    <br>
    <br>
    <br>

    <div class="form-group" align="center">
      <h2><strong>내용</strong></h2>
        <input name="body" class="form-control" id="input-body" placeholder="내용을 입력하세요">
    </div>
    <br>
    <div align="center">
        <button type="button" class="btn btn-primary" id="post-write-btn">게시글 작성</button>

    </div>
</form>


<Script>
    // post 객체 생성
    let post = {
        // 초기화(이벤트 등록) 메소드
        init: function () {

            var _this = this;

            // 버튼 클릭 시 createBtn 이 생성됨
            // querySelector 는 id를 기준으로 값을 가져온다.
            const createBtn = document.querySelector('#post-write-btn');

            // 생성 버튼 클릭 시, 동작 할 메소드를 연결
            createBtn.addEventListener('click', _this.create);
        },


        create: function () {
            // form 데이터를 JSON으로 만듬

            // data 객체를 만든다. 일종의 dto 객체 형식으로 만드는 것과 비슷한 느낌이다.
            let data = {
                title: document.querySelector('#input-title').value.trim(),
                body: document.querySelector('#input-body').value,
            };
            console.log(data);

            if (data.title == null || data.title == "") {
                alert('제목이 비어있습니다. 입력해주세요.');
                return;
            }
            if (data.body == null|| data.body == "") {
                alert('내용이 비어있습니다. 입력해주세요.');
                return;
            }

            // 데이터 생성 요청을 보냄
            axios.post("/api/v1/posts",
                    JSON.stringify(data), { // dto 처럼 만든 객체 data를 stringify 함수로 JSON 형식으로 만든다.
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': `Bearer ${localStorage.getItem("token")}`
                        }
                    }
            ).then((response) => {
                alert("게시글 작성이 완료되었습니다.");
                window.location.href = '/posts';
            }).catch((error) => {
                if (error.response.data.result["errorCode"] == "EXPIRED_TOKEN") {
                    alert("토큰이 만료되었으니 다시 로그인 해주세요");
                    // window.location.href = '/posts/';
                }else if(error.response.data.result["errorCode"] =="USER_NOT_MATCH"){
                    alert("본인이 작성한 게시글만 삭제할 수 있습니다.");
                }else if(error.response.data.result["errorCode"] =="INVALID_TOKEN"){
                    alert("로그인 후 이용해주세요");
                }
            });
        }
    };
    // 객체 초기화
    post.init();
</script>