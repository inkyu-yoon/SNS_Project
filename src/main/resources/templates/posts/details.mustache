{{>layouts/header}}
<div>
    {{#post}}
        <input type="hidden" name="id" value="{{id}}" id="input-postId"/>
        <form class="container">
            <ul class="list-group">
                <li class="list-group-item active" aria-current="true">{{title}}</li>

                <li class="list-group-item"> 작성자 : {{userName}}</li>

                {{#isModified}}
                    <li class="list-group-item"> 작성일자 : {{lastModifiedAt}}  {{isModified}}</li>
                {{/isModified}}
                {{^isModified}}
                    <li class="list-group-item"> 작성일자 : {{createdAt}}</li>
                {{/isModified}}

                <li class="list-group-item">  {{body}}</li>
                <br>

            </ul>


            </tbody>
            </table>
        </form>


        <div align="center">

            <div style="display: inline-block">
                <form class="container" form action="/posts/modify/{{id}}" method="get">
                    <button type="submit" class="btn btn-primary btn-lg">게시글 수정</button>
                </form>
            </div>


            <div style="display: inline-block">
                <form class="container">
                    <button type="button" class="btn btn-danger btn-lg" id="post-delete-btn">게시글 삭제</button>
                </form>
            </div>

            <div style="display: inline-block">
                <form class="container" form action="/posts" method="get">
                    <button class="btn btn-success btn-lg" type="submit">게시글 목록</button>
                </form>
            </div>
        </div>

    {{/post}}
</div>

<br>

<div class="container">
    <table class="table table-hover">
        {{#comments}}
            <input type="hidden" name="id" value="{{id}}" id="input-commentId"/>
            <tbody>
            <tr>
                <td>{{id}}</td>
                <td>{{userName}}</td>
                <td>{{comment}}</td>
                <td>{{createdAt}}</td>

                <br>
                <form class="container">
                    <div class="d-grid gap-2 col-6 mx-auto">

                        <th scope="row">
                            <button type="button" class="btn btn-danger btn-lg" id="comment-delete-btn">댓글 삭제</button>
                        </th>
                    </div>
                </form>
            </tr>
            </tbody>
        {{/comments}}
    </table>
</div>
<form class="container">

    <div class="mb-3">
        <input class="form-control" id="input-comment" rows="1" name="comment" placeholder="댓글 입력">
    </div>

    <div align="right">
        <button type="button" class="btn btn-primary btn-lg" id="comment-write-btn">댓글 등록</button>
    </div>


</form>




<Script>
    // post 객체 생성
    let post = {
        // 초기화(이벤트 등록) 메소드
        init: function () {

            var _this = this;

            // 버튼 클릭 시 createBtn 이 생성됨
            // querySelector 는 id를 기준으로 값을 가져온다.
            const createBtn = document.querySelector('#post-delete-btn');

            // 생성 버튼 클릭 시, 동작 할 메소드를 연결
            createBtn.addEventListener('click', _this.create);
        },


        create: function () {
            // form 데이터를 JSON으로 만듬

            let postId = document.querySelector(`#input-postId`).value;
            // data 객체를 만든다. 일종의 dto 객체 형식으로 만드는 것과 비슷한 느낌이다.

            // 데이터 생성 요청을 보냄
            axios.delete("/api/v1/posts/" + postId, { // dto 처럼 만든 객체 data를 stringify 함수로 JSON 형식으로 만든다.
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': `Bearer ${localStorage.getItem("token")}`
                        }
                    }
            ).then((response) => {
                        console.log(response);
                        alert("게시글이 삭제되었습니다.")
                        window.location.href = '/posts';
                    }
            ).catch((error) => {
                console.log(error.response.data.result);
                if (error.response.data.result["errorCode"] == "EXPIRED_TOKEN") {
                    alert("토큰이 만료되었으니 다시 로그인 해주세요");
                    // window.location.href = '/posts/';
                } else if (error.response.data.result["errorCode"] == "USER_NOT_MATCH") {
                    alert("본인이 작성한 게시글만 삭제할 수 있습니다.");
                } else if (error.response.data.result["errorCode"] == "INVALID_TOKEN") {
                    alert("로그인 후 이용해주세요");
                }
            });

            console.log(response);
        }
    };
    // 객체 초기화
    post.init();
</script>

<Script>
    // comment 객체 생성
    let comment = {
        // 초기화(이벤트 등록) 메소드
        init: function () {

            var _this = this;

            // 버튼 클릭 시 createBtn 이 생성됨
            // querySelector 는 id를 기준으로 값을 가져온다.
            const createBtn = document.querySelector('#comment-write-btn');
            const deleteBtn = document.querySelector('#comment-delete-btn');

            createBtn.addEventListener('click', _this.create);
            deleteBtn.addEventListener('click', _this.delete);
        },


        create: function () {
            // form 데이터를 JSON으로 만듬
            let postId = document.querySelector(`#input-postId`).value;

            // data 객체를 만든다. 일종의 dto 객체 형식으로 만드는 것과 비슷한 느낌이다.
            let data = {
                comment: document.querySelector('#input-comment').value.trim()
            };
            console.log(data);

            if (data.comment == null || data.comment == "") {
                alert('댓글 내용이 비어있습니다. 입력해주세요.');
                return;
            }

            // 데이터 생성 요청을 보냄
            axios.post("/api/v1/posts/" + postId + "/comments",
                    JSON.stringify(data), { // dto 처럼 만든 객체 data를 stringify 함수로 JSON 형식으로 만든다.
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': `Bearer ${localStorage.getItem("token")}`
                        }
                    }
            ).then((response) => {
                alert("댓글 작성이 완료되었습니다.");
                window.location.href = '/posts/' + postId;
            }).catch((error) => {
                if (error.response.data.result["errorCode"] == "EXPIRED_TOKEN") {
                    alert("토큰이 만료되었으니 다시 로그인 해주세요");
                } else if (error.response.data.result["errorCode"] == "TOKEN_NOT_FOUND") {
                    alert("로그인 후 이용해주세요");
                } else if (error.response.data.result["errorCode"] == "INVALID_TOKEN") {
                    alert("다시 로그인 후 이용해주세요");
                } else if (error.response.data.result["errorCode"] == "DATABASE_ERROR") {
                    alert("DB 에러가 발생했습니다.");
                } else if (error.response.data.result["errorCode"] == "USERNAME_NOT_FOUND") {
                    alert("가입된 회원이 아닙니다. 회원가입 후 진행해주세요");
                }
            });
        },

        delete: function () {
            // form 데이터를 JSON으로 만듬

            let postId = document.querySelector(`#input-postId`).value;
            let commentId = document.querySelector(`#input-commentId`).value;
            // data 객체를 만든다. 일종의 dto 객체 형식으로 만드는 것과 비슷한 느낌이다.

            // 데이터 생성 요청을 보냄
            axios.delete("/api/v1/posts/" + postId + "/comments/" + commentId, { // dto 처럼 만든 객체 data를 stringify 함수로 JSON 형식으로 만든다.
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': `Bearer ${localStorage.getItem("token")}`
                        }
                    }
            ).then((response) => {
                        console.log(response);
                        alert("댓글이 삭제되었습니다.")
                        window.location.href = '/posts/' + postId;
                    }
            ).catch((error) => {
                console.log(error.response.data.result);
                if (error.response.data.result["errorCode"] == "EXPIRED_TOKEN") {
                    alert("토큰이 만료되었으니 다시 로그인 해주세요");
                    // window.location.href = '/posts/';
                } else if (error.response.data.result["errorCode"] == "USER_NOT_MATCH") {
                    alert("본인이 작성한 댓글만 삭제할 수 있습니다.");
                } else if (error.response.data.result["errorCode"] == "INVALID_TOKEN") {
                    alert("로그인 후 이용해주세요");
                }
            });

        }

    };
    // 객체 초기화
    comment.init();
</script>
