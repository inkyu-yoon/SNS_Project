{{>layouts/header}}
<div>
{{#post}}
        <form class="container">
            <ul class="list-group">
                <li class="list-group-item active" aria-current="true"
                    style="font-size: 30px;font-weight: bold">{{title}}</li>

                {{! 게시글 수정 할 시, (수정됨) 이라고 표시됨}}
                {{#isModified}}
                    <li class="list-group-item">
                        <span>
                    <span style="font-size: 20px;font-weight: bold;">{{userName}}</span>
                    <span style="font-size:10px"> {{lastModifiedAt}} {{isModified}}</span>
                </span>
                    </li>
                {{/isModified}}
                {{^isModified}}
                    <li class="list-group-item">
                        <span>
                    <span style="font-size: 20px;font-weight: bold;">{{userName}}</span>
                    <span style="font-size:10px">{{createdAt}}</span>
                </span>
                    </li>
                {{/isModified}}
                {{!}}

                <li class="list-group-item" style="height: 500px;white-space: pre">  {{body}}</li>
                <br>
            </ul>
            </tbody>
            </table>
        </form>

        <div align="center">
            <form class="container">
                {{! 좋아요 입력 버튼!! 클릭 시 likeCreate 함수 파라미터에 post id를 전달하고 함수 실행}}
                <button type="button" class="btn btn-outline-secondary btn-lg" id="like-btn"
                        onclick="main.likeCreate({{id}})"
                        style="width:60px;height:50px;font-size: 20px">❤
                </button>
                <button type="button" class="btn btn-secondary btn-lg"
                        style="width:60px;height:50px;font-size: 20px">{{likeNum}}
                </button>
            </form>
        </div>

        <br>

        <div align="center">

            <div style="display: inline-block">
                {{! 게시글 수정 버튼!! 클릭 시 수정 페이지로 이동}}
                <form class="container" form action="/posts/modify/{{id}}" method="get">
                    <button type="submit" class="btn btn-primary btn-lg"
                            style="width:120px;height:40px;font-size: 15px">게시글 수정
                    </button>
                </form>
            </div>


            <div style="display: inline-block">
                <form class="container">
                    {{! 게시글 삭제 버튼!! 클릭 시 postDelete 함수 파라미터에 post id를 전달하고 함수 실행}}
                    <button type="button" class="btn btn-danger btn-lg" id="post-delete-btn"
                            onclick="main.postDelete({{id}})"
                            style="width:120px;height:40px;font-size: 15px">게시글 삭제
                    </button>
                </form>
            </div>

            <div style="display: inline-block">
                <form class="container" form action="/posts" method="get">
                    <button class="btn btn-success btn-lg" type="submit"
                            style="width:120px;height:40px;font-size: 15px">게시글 목록
                    </button>
                </form>
            </div>
        </div>

    </div>
{{/post}}

<br>
<hr>
<div class="container">
    <div class="card border-primary mb-3">
        <div class="card-header bi bi-chat-dots"> {{#comments.size}}{{comments.numberOfElements}}{{/comments.size}}
            Comments
        </div>

        <ul class="list-group-flush">
            {{#comments}}
                <li id="comments-{{id}}" class="list-group-item">
                <span>
                    <span style="font-size: 15px;font-weight: bold;">{{userName}}</span>
                    {{^isModified}}
                        <span style="font-size: xx-small;">{{createdAt}}</span>
                    {{/isModified}}
                    {{#isModified}}
                        <span style="font-size: xx-small;">{{lastModifiedAt}} {{isModified}}</span>
                    {{/isModified}}

                        </span>

                    {{! 댓글 수정 버튼!! 클릭 시 collapse 되어 있는 multi-collapse-id form 을 열어준다.}}
                    <a type="button" class="comment-edit-btn" data-toggle="collapse"
                       data-target=".multi-collapse-{{id}}" style="font-size: xx-small;">수정</a>
                    </small>

                    {{! 댓글 삭제 버튼!! 클릭 시 commentDelete 함수에 위 해당 댓글의 id와 postId를 전달한다.}}
                    <a class="accordion-button collapsed" type="button" style="font-size: xx-small;color: darkred;"
                       onclick="main.commentDelete({{postId}},{{id}})">
                        삭제
                    </a>

                    <div>{{comment}}</div>

                    {{! 댓글 수정 버튼!! 클릭 시 collapse 되어 있는 multi-collapse-id form 을 열어준다.}}

                    <a type="button" class="comment-reply-btn" data-toggle="collapse"
                       data-target=".multi-collapse-reply-{{id}}" style="font-size: xx-small;">▼ 댓글의 댓글 {{replysSize}} 개</a>
                    </small>

                    {{! 대댓글}}
                    <div class="collapse-group">
                    <form class="collapse multi-collapse-reply-{{id}}">
                        <ul class="list-group-flush">
                            {{#replys}}
                                <li id="reply-comments-{{id}}" class="list-group-item">
                <span>
                    <span style="font-size: 15px;font-weight: bold;">{{userName}}</span>
                    {{^isModified}}
                        <span style="font-size: xx-small;">{{createdAt}}</span>
                    {{/isModified}}
                    {{#isModified}}
                        <span style="font-size: xx-small;">{{lastModifiedAt}} {{isModified}}</span>
                    {{/isModified}}

                        </span>

<!--                                    {{! 댓글 수정 버튼!! 클릭 시 collapse 되어 있는 multi-collapse-id form 을 열어준다.}}-->
<!--                                    <a type="button" class="comment-reply-edit-btn" data-toggle="collapse"-->
<!--                                       data-target=".multi-collapse-reply-edit-{{id}}" style="font-size: xx-small;">수정</a>-->
<!--                                    </small>-->

                                    {{! 댓글 삭제 버튼!! 클릭 시 commentDelete 함수에 위 해당 댓글의 id와 postId를 전달한다.}}
                                    <a class="accordion-button collapsed" type="button"
                                       style="font-size: xx-small;color: darkred;"
                                       onclick="main.commentDelete({{postId}},{{id}})">
                                        삭제
                                    </a>

                                    <div>{{comment}}</div>

<!--                                    <form class="collapse multi-collapse-reply-edit-{{id}}">-->
<!--                                        <div class="form-group">-->
<!--                                            {{! 댓글 수정 버튼!! 클릭 시, id 가 comment-content 내용 전달 }}-->
<!--                                            <textarea class="form-control" id="comment-content"-->
<!--                                                      rows="1" class = "collapse">{{comment}}</textarea>-->
<!--                                        </div>-->
<!--                                        {{! 댓글 수정 버튼!! 클릭 시, id 가 comment-id 로 댓글 번호를 전달 }}-->
<!--                                        <input type="hidden" id="comment-id" value="{{id}}">-->
<!--                                        {{! 댓글 수정 버튼!! 클릭 시, id 가 post-id 포스트 번호 전달 }}-->
<!--                                        <input type="hidden" id="post-id" value="{{postId}}">-->
<!--                                        <div align="right">-->
<!--                                            {{! 댓글 수정 버튼!! 클릭 시 위 id가 comment-content 인 textarea 내용을 form 형태로 전달하여 수정}}-->
<!--                                            <button type="button" class="btn btn-info" id="comment-update-btn">수정 완료-->
<!--                                            </button>-->
<!--                                        </div>-->
<!--                                    </form>-->

                                </li>
                            {{/replys}}
                        </ul>


                        <form class="collapse multi-collapse-reply-{{id}}">
                            <div class="mb-3">
                                {{! 댓글 등록 버튼!! 클릭 시, id 가 input-write-comment 내용 전달 }}
                                <textarea class="form-control" id="comment-reply-content" rows="1"></textarea>
                            </div>
                            {{! 댓글 수정 버튼!! 클릭 시, id 가 comment-id 로 댓글 번호를 전달 }}
                            <input type="hidden" id="comment-id" value="{{id}}">
                            {{! 댓글 수정 버튼!! 클릭 시, id 가 post-id 포스트 번호 전달 }}
                            <input type="hidden" id="post-id" value="{{postId}}">
                                <div align="right">
                                    {{! 댓글 등록 버튼!! 클릭 시 commentWrite 함수 파라미터에 post id를 전달하고 함수 실행}}
                                    <button type="button" class="btn btn-info" id="comment-reply-btn">댓글 등록</button>

                                    </button>
                                </div>
                        </form>
                    </form>
                    </div>
                    {{! 대댓글 END}}




                    <form class="collapse multi-collapse-{{id}}">
                        <div class="form-group">
                            {{! 댓글 수정 버튼!! 클릭 시, id 가 comment-content 내용 전달 }}
                            <textarea class="form-control" id="comment-content" rows="1">{{comment}}</textarea>
                        </div>
                        {{! 댓글 수정 버튼!! 클릭 시, id 가 comment-id 로 댓글 번호를 전달 }}
                        <input type="hidden" id="comment-id" value="{{id}}">
                        {{! 댓글 수정 버튼!! 클릭 시, id 가 post-id 포스트 번호 전달 }}
                        <input type="hidden" id="post-id" value="{{postId}}">
                        <div align="right">
                            {{! 댓글 수정 버튼!! 클릭 시 위 id가 comment-content 인 textarea 내용을 form 형태로 전달하여 수정}}
                            <button type="button" class="btn btn-info" id="comment-update-btn">수정 완료</button>
                        </div>
                    </form>

                </li>
            {{/comments}}
        </ul>
    </div>
</div>

<form class="container">
    <div class="mb-3">
        {{! 댓글 등록 버튼!! 클릭 시, id 가 input-write-comment 내용 전달 }}
        <input class="form-control" id="input-write-comment" rows="1" name="comment" placeholder="댓글 입력">
    </div>
    {{#post}}
        <div align="right">
            {{! 댓글 등록 버튼!! 클릭 시 commentWrite 함수 파라미터에 post id를 전달하고 함수 실행}}
            <button type="button" class="btn btn-primary btn-lg" id="comment-write-btn"
                    onclick="main.commentWrite({{id}})">댓글 등록
            </button>
        </div>
    {{/post}}
</form>


<script>
    const main = {
        init: function () {

            const _this = this;

            // 댓글 수정 버튼 클릭시
            const updateBtns = document.querySelectorAll('#comment-update-btn');

            updateBtns.forEach(function (item) {
                item.addEventListener('click', function () {
                    var form = this.closest('form');
                    _this.commentUpdate(form);
                });
            });

            // 대댓글 작성 버튼 클릭시
            const replyBtns = document.querySelectorAll('#comment-reply-btn');

            replyBtns.forEach(function (item) {
                item.addEventListener('click', function () {
                    var form = this.closest('form');
                    _this.replyCommentWrite(form);
                });
            });


        },
        /** 게시글 삭제 **/
        postDelete: function (postId) {

            const con_check = confirm("게시글을 삭제 하시겠습니까?");

            if (con_check === true) {
                axios.delete("/api/v1/posts/" + postId, {
                            headers: {
                                'Content-Type': 'application/json',
                                'Authorization': `Bearer ${localStorage.getItem("token")}`
                            }
                        }
                ).then((response) => {
                            console.log(response);
                            alert("게시글이 삭제되었습니다.")
                            window.location.href = '/posts';
                        }
                ).catch((error) => {
                    console.log(error.response.data.result);
                    if (error.response.data.result["errorCode"] == "EXPIRED_TOKEN") {
                        alert("토큰이 만료되었으니 다시 로그인 해주세요");
                        window.location.href = '/users/login';
                    } else if (error.response.data.result["errorCode"] == "USER_NOT_MATCH") {
                        alert("본인이 작성한 게시글만 삭제할 수 있습니다.");
                    } else if (error.response.data.result["errorCode"] == "TOKEN_NOT_FOUND") {
                        alert("로그인 후 이용해주세요");
                        window.location.href = '/users/login';
                    } else if (error.response.data.result["errorCode"] == "INVALID_TOKEN") {
                        alert("로그인 후 이용해주세요");
                        window.location.href = '/users/login';
                    } else {
                        alert("문제가 발생했습니다. 에러가 계속된다면 관리자에게 문의해주세요");
                    }
                });
            }
        },

        /** 댓글 작성 **/
        commentWrite: function (postId) {

            let data = {
                comment: document.querySelector('#input-write-comment').value.trim()
            };

            console.log(data);


            const con_check = confirm("댓글을 작성 하시겠습니까?");

            if (con_check === true) {
                axios.post("/api/v1/posts/" + postId + "/comments",
                        JSON.stringify(data), { // dto 처럼 만든 객체 data를 stringify 함수로 JSON 형식으로 만든다.
                            headers: {
                                'Content-Type': 'application/json',
                                'Authorization': `Bearer ${localStorage.getItem("token")}`
                            }
                        }
                ).then((response) => {
                    alert("댓글 작성이 완료되었습니다.");
                    window.location.href = '/posts/' + postId;
                }).catch((error) => {
                    if (error.response.data.result["errorCode"] == "EXPIRED_TOKEN") {
                        alert("토큰이 만료되었으니 다시 로그인 해주세요");
                        window.location.href = '/users/login';
                    } else if (error.response.data.result["errorCode"] == "INVALID_TOKEN") {
                        alert("로그인 후 이용해주세요");
                        window.location.href = '/users/login';
                    } else if (error.response.data.result["errorCode"] == "TOKEN_NOT_FOUND") {
                        alert("로그인 후 이용해주세요");
                        window.location.href = '/users/login';
                    } else if (error.response.data.result["errorCode"] == "BLANK_NOT_ALLOWED") {
                        alert("댓글 내용을 입력해주세요");
                    } else {
                        alert("문제가 발생했습니다. 에러가 계속된다면 관리자에게 문의해주세요");
                    }
                });
            }
        },

        replyCommentWrite: function (form) {

            const commentId = form.querySelector('#comment-id').value;
            const postId = form.querySelector('#post-id').value;

            const data = {
                replyComment: form.querySelector('#comment-reply-content').value
            }

            console.log(data);


            const con_check = confirm("댓글을 작성 하시겠습니까?");

            if (con_check === true) {
                axios.post("/api/v1/posts/" + postId + "/comments/" + commentId,
                        JSON.stringify(data), { // dto 처럼 만든 객체 data를 stringify 함수로 JSON 형식으로 만든다.
                            headers: {
                                'Content-Type': 'application/json',
                                'Authorization': `Bearer ${localStorage.getItem("token")}`
                            }
                        }
                ).then((response) => {
                    alert("댓글 작성이 완료되었습니다.");
                    window.location.href = '/posts/' + postId;
                }).catch((error) => {
                    if (error.response.data.result["errorCode"] == "EXPIRED_TOKEN") {
                        alert("토큰이 만료되었으니 다시 로그인 해주세요");
                        window.location.href = '/users/login';
                    } else if (error.response.data.result["errorCode"] == "INVALID_TOKEN") {
                        alert("로그인 후 이용해주세요");
                        window.location.href = '/users/login';
                    } else if (error.response.data.result["errorCode"] == "TOKEN_NOT_FOUND") {
                        alert("로그인 후 이용해주세요");
                        window.location.href = '/users/login';
                    } else if (error.response.data.result["errorCode"] == "BLANK_NOT_ALLOWED") {
                        alert("댓글 내용을 입력해주세요");
                    } else {
                        alert("문제가 발생했습니다. 에러가 계속된다면 관리자에게 문의해주세요");
                    }
                });
            }
        },


        /** 댓글 수정 */
        commentUpdate: function (form) {

            const commentId = form.querySelector('#comment-id').value;
            const postId = form.querySelector('#post-id').value;

            const data = {
                comment: form.querySelector('#comment-content').value
            }
            console.log(data);

            const url = `/api/v1/posts/${postId}/comments/${commentId}`;
            console.log(url);

            const con_check = confirm("수정하시겠습니까?");

            if (con_check === true) {
                axios.put(url,
                        JSON.stringify(data), {
                            headers: {
                                'Content-Type': 'application/json',
                                'Authorization': `Bearer ${localStorage.getItem("token")}`
                            }
                        }
                ).then((response) => {
                            console.log(response);
                            alert("댓글이 수정되었습니다.")
                            window.location.href = '/posts/' + postId;
                        }
                ).catch((error) => {
                    console.log(error.response.data.result);
                    if (error.response.data.result["errorCode"] == "EXPIRED_TOKEN") {
                        alert("토큰이 만료되었으니 다시 로그인 해주세요");
                        window.location.href = '/users/login';
                    } else if (error.response.data.result["errorCode"] == "USER_NOT_MATCH") {
                        alert("본인이 작성한 댓글만 수정할 수 있습니다.");
                    } else if (error.response.data.result["errorCode"] == "INVALID_TOKEN") {
                        alert("로그인 후 이용해주세요");
                        window.location.href = '/users/login';
                    } else if (error.response.data.result["errorCode"] == "TOKEN_NOT_FOUND") {
                        alert("로그인 후 이용해주세요");
                        window.location.href = '/users/login';
                    } else if (error.response.data.result["errorCode"] == "BLANK_NOT_ALLOWED") {
                        alert("수정할 댓글 내용을 입력해주세요");
                    } else {
                        alert("문제가 발생했습니다. 에러가 계속된다면 관리자에게 문의해주세요");
                    }
                });
            }
        },

        /** 댓글 삭제 */
        commentDelete: function (postId, commentId) {

            const url = `/api/v1/posts/${postId}/comments/${commentId}`;
            console.log(url);

            const con_check = confirm("삭제하시겠습니까?");

            if (con_check === true) {

                axios.delete(url, {
                            headers: {
                                'Content-Type': 'application/json',
                                'Authorization': `Bearer ${localStorage.getItem("token")}`
                            }
                        }
                ).then((response) => {
                            console.log(response);
                            alert("댓글이 삭제되었습니다.")
                            window.location.href = '/posts/' + postId;
                        }
                ).catch((error) => {
                    console.log(error.response.data.result);
                    if (error.response.data.result["errorCode"] == "EXPIRED_TOKEN") {
                        alert("토큰이 만료되었으니 다시 로그인 해주세요");
                        window.location.href = '/users/login';
                    } else if (error.response.data.result["errorCode"] == "USER_NOT_MATCH") {
                        alert("본인이 작성한 댓글만 삭제할 수 있습니다.");
                    } else if (error.response.data.result["errorCode"] == "TOKEN_NOT_FOUND") {
                        alert("로그인 후 이용해주세요");
                        window.location.href = '/users/login';
                    } else if (error.response.data.result["errorCode"] == "INVALID_TOKEN") {
                        alert("로그인 후 이용해주세요");
                        window.location.href = '/users/login';
                    } else {
                        alert("문제가 발생했습니다. 에러가 계속된다면 관리자에게 문의해주세요");
                    }
                });
            }
        },

        /** 좋아요 클릭 **/
        likeCreate: function (postId) {

            const data = null;
            const con_check = confirm("좋아요를 누르시겠습니까?");

            const url = "/api/v1/posts/" + postId + "/likes";

            if (con_check === true) {
                axios.post(url, data, {
                            headers: {
                                'Content-Type': 'application/json',
                                'Authorization': `Bearer ${localStorage.getItem("token")}`
                            }
                        }
                ).then((response) => {
                            console.log(response);
                            alert("💖")
                            window.location.href = '/posts/' + postId;
                        }
                ).catch((error) => {
                    console.log(error.response.data.result);
                    console.log(error.response)
                    console.log(url);
                    if (error.response.data.result["errorCode"] == "EXPIRED_TOKEN") {
                        alert("토큰이 만료되었으니 다시 로그인 해주세요");
                        window.location.href = '/users/login';
                    } else if (error.response.data.result["errorCode"] == "INVALID_TOKEN") {
                        alert("로그인 후 이용해주세요");
                        window.location.href = '/users/login';
                    } else if (error.response.data.result["errorCode"] == "TOKEN_NOT_FOUND") {
                        alert("로그인 후 이용해주세요");
                        // window.location.href = '/users/login';
                    } else if (error.response.data.result["errorCode"] == "FORBIDDEN_ADD_LIKE") {
                        alert("좋아요는 한번만 입력할 수 있습니다.");
                        window.location.href = '/posts/' + postId;
                    } else {
                        alert("문제가 발생했습니다. 에러가 계속된다면 관리자에게 문의해주세요");
                    }
                });
            }
        }
    };

    main.init();
</script>
