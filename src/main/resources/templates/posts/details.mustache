{{>layouts/header}}
<div>
{{#post}}
        <input type="hidden" name="id" value="{{id}}" id="input-postId"/>
        <form class="container">
            <ul class="list-group">
                <li class="list-group-item active" aria-current="true">{{title}}</li>

                <li class="list-group-item"> 작성자 : {{userName}}</li>

                {{#isModified}}
                    <li class="list-group-item"> 작성일자 : {{lastModifiedAt}}  {{isModified}}</li>
                {{/isModified}}
                {{^isModified}}
                    <li class="list-group-item"> 작성일자 : {{createdAt}}</li>
                {{/isModified}}

                <li class="list-group-item" style="height: 500px">  {{body}}</li>
                <br>

            </ul>


            </tbody>
            </table>
        </form>

        <div align="center">
            <form class="container">
                <button type="button" class="btn btn-outline-secondary btn-lg" id="like-btn"
                        style="width:60px;height:50px;font-size: 20px">❤
                </button>
                <button type="button" class="btn btn-secondary btn-lg"
                        style="width:60px;height:50px;font-size: 20px">{{likesCount}}
                </button>
            </form>
        </div>

        <br>

        <div align="center">

            <div style="display: inline-block">
                <form class="container" form action="/posts/modify/{{id}}" method="get">
                    <button type="submit" class="btn btn-primary btn-lg"
                            style="width:120px;height:40px;font-size: 15px">게시글 수정
                    </button>
                </form>
            </div>


            <div style="display: inline-block">
                <form class="container">
                    <button type="button" class="btn btn-danger btn-lg" id="post-delete-btn"
                            style="width:120px;height:40px;font-size: 15px">게시글 삭제
                    </button>
                </form>
            </div>

            <div style="display: inline-block">
                <form class="container" form action="/posts" method="get">
                    <button class="btn btn-success btn-lg" type="submit"
                            style="width:120px;height:40px;font-size: 15px">게시글 목록
                    </button>
                </form>
            </div>
        </div>

    </div>

    <br>
    <hr>
    <div class="container">
        <div class="card border-primary mb-3">
            <div class="card-header bi bi-chat-dots"> {{#comments.size}}{{comments.numberOfElements}}{{/comments.size}}
                Comments
            </div>

            <ul class="list-group-flush">
                {{#comments}}
                    <li id="comments-{{commentId}}" class="list-group-item">
                <span>
                    <span style="font-size: small">{{userName}}</span>
                    <span style="font-size: xx-small">{{createdAt}}</span>
                </span>

                        <a type="button" class="comment-edit-btn" data-toggle="collapse"
                           data-target=".multi-collapse-{{commentId}}">수정</a>
                        </small>

                        <a class="accordion-button collapsed" type="button"
                           onclick="main.commentDelete({{id}},{{commentId}})">
                            삭제
                        </a>

                        <div>{{comment}}</div>

                        <form class="collapse multi-collapse-{{commentId}}">
                            <div class="form-group">
                                <textarea class="form-control" id="comment-content" rows="3">{{comment}}</textarea>
                            </div>
                            <input type="hidden" id="comment-id" value="{{commentId}}">
                            <input type="hidden" id="post-id" value="{{id}}">
                            <div align="right">
                                <button type="button" class="btn btn-info" id="comment-update-btn">수정 완료</button>
                            </div>
                        </form>
                    </li>
                {{/comments}}
            </ul>
        </div>
    </div>
{{/post}}

<form class="container">
    <div class="mb-3">
        <input class="form-control" id="input-write-comment" rows="1" name="comment" placeholder="댓글 입력">
    </div>

    <div align="right">
        <button type="button" class="btn btn-primary btn-lg" id="comment-write-btn">댓글 등록</button>
    </div>
</form>


<script>
    const main = {
        init: function () {

            const _this = this;

            const updateBtns = document.querySelectorAll('#comment-update-btn');

            const commentWriteBtn = document.querySelector('#comment-write-btn');
            commentWriteBtn.addEventListener('click', _this.commentWrite);

            const postDeleteBtn = document.querySelector('#post-delete-btn');
            postDeleteBtn.addEventListener('click', _this.postDelete);

            const LikeBtn = document.querySelector('#like-btn');
            LikeBtn.addEventListener('click', _this.likeCreate);

            updateBtns.forEach(function (item) {
                item.addEventListener('click', function () {
                    var form = this.closest('form');
                    _this.commentUpdate(form);
                });
            });


        },
        /** 게시글 삭제 **/
        postDelete: function () {

            let postId = document.querySelector(`#input-postId`).value;
            const con_check = confirm("게시글을 삭제 하시겠습니까?");

            if (con_check === true) {
                axios.delete("/api/v1/posts/" + postId, {
                            headers: {
                                'Content-Type': 'application/json',
                                'Authorization': `Bearer ${localStorage.getItem("token")}`
                            }
                        }
                ).then((response) => {
                            console.log(response);
                            alert("게시글이 삭제되었습니다.")
                            window.location.href = '/posts';
                        }
                ).catch((error) => {
                    console.log(error.response.data.result);
                    if (error.response.data.result["errorCode"] == "EXPIRED_TOKEN") {
                        alert("토큰이 만료되었으니 다시 로그인 해주세요");
                        window.location.href = '/users/login';
                    } else if (error.response.data.result["errorCode"] == "USER_NOT_MATCH") {
                        alert("본인이 작성한 게시글만 삭제할 수 있습니다.");
                    } else if (error.response.data.result["errorCode"] == "TOKEN_NOT_FOUND") {
                        alert("로그인 후 이용해주세요");
                        window.location.href = '/users/login';
                    } else if (error.response.data.result["errorCode"] == "INVALID_TOKEN") {
                        alert("로그인 후 이용해주세요");
                        window.location.href = '/users/login';
                    } else {
                        alert("문제가 발생했습니다. 에러가 계속된다면 관리자에게 문의해주세요");
                    }
                });
            }
        },

        /** 댓글 작성 **/
        commentWrite: function () {

            let postId = document.querySelector(`#input-postId`).value;

            let data = {
                comment: document.querySelector('#input-write-comment').value.trim()
            };
            console.log(data);


            const con_check = confirm("댓글을 작성 하시겠습니까?");

            if (con_check === true) {
                axios.post("/api/v1/posts/" + postId + "/comments",
                        JSON.stringify(data), { // dto 처럼 만든 객체 data를 stringify 함수로 JSON 형식으로 만든다.
                            headers: {
                                'Content-Type': 'application/json',
                                'Authorization': `Bearer ${localStorage.getItem("token")}`
                            }
                        }
                ).then((response) => {
                    alert("댓글 작성이 완료되었습니다.");
                    window.location.href = '/posts/' + postId;
                }).catch((error) => {
                    if (error.response.data.result["errorCode"] == "EXPIRED_TOKEN") {
                        alert("토큰이 만료되었으니 다시 로그인 해주세요");
                        window.location.href = '/users/login';
                    } else if (error.response.data.result["errorCode"] == "INVALID_TOKEN") {
                        alert("로그인 후 이용해주세요");
                        window.location.href = '/users/login';
                    } else if (error.response.data.result["errorCode"] == "TOKEN_NOT_FOUND") {
                        alert("로그인 후 이용해주세요");
                        window.location.href = '/users/login';
                    } else if (error.response.data.result["errorCode"] == "BLANK_NOT_ALLOWED") {
                        alert("댓글 내용을 입력해주세요");
                    } else {
                        alert("문제가 발생했습니다. 에러가 계속된다면 관리자에게 문의해주세요");
                    }
                });
            }
        },

        /** 댓글 수정 */
        commentUpdate: function (form) {

            const postId = form.querySelector('#post-id').value;
            const commentId = form.querySelector('#comment-id').value;
            const data = {
                comment: form.querySelector('#comment-content').value
            }
            console.log(data);

            const url = `/api/v1/posts/${postId}/comments/${commentId}`;
            console.log(url);

            const con_check = confirm("수정하시겠습니까?");

            if (con_check === true) {
                axios.put(url,
                        JSON.stringify(data), {
                            headers: {
                                'Content-Type': 'application/json',
                                'Authorization': `Bearer ${localStorage.getItem("token")}`
                            }
                        }
                ).then((response) => {
                            console.log(response);
                            alert("댓글이 수정되었습니다.")
                            window.location.href = '/posts/' + postId;
                        }
                ).catch((error) => {
                    console.log(error.response.data.result);
                    if (error.response.data.result["errorCode"] == "EXPIRED_TOKEN") {
                        alert("토큰이 만료되었으니 다시 로그인 해주세요");
                        window.location.href = '/users/login';
                    } else if (error.response.data.result["errorCode"] == "USER_NOT_MATCH") {
                        alert("본인이 작성한 댓글만 수정할 수 있습니다.");
                    } else if (error.response.data.result["errorCode"] == "INVALID_TOKEN") {
                        alert("로그인 후 이용해주세요");
                        window.location.href = '/users/login';
                    } else if (error.response.data.result["errorCode"] == "TOKEN_NOT_FOUND") {
                        alert("로그인 후 이용해주세요");
                        window.location.href = '/users/login';
                    } else if (error.response.data.result["errorCode"] == "BLANK_NOT_ALLOWED") {
                        alert("수정할 댓글 내용을 입력해주세요");
                    } else {
                        alert("문제가 발생했습니다. 에러가 계속된다면 관리자에게 문의해주세요");
                    }
                });
            }
        },

        /** 댓글 삭제 */
        commentDelete: function (postId, commentId) {

            const url = `/api/v1/posts/${postId}/comments/${commentId}`;
            console.log(url);
            const con_check = confirm("삭제하시겠습니까?");
            if (con_check === true) {

                axios.delete(url, {
                            headers: {
                                'Content-Type': 'application/json',
                                'Authorization': `Bearer ${localStorage.getItem("token")}`
                            }
                        }
                ).then((response) => {
                            console.log(response);
                            alert("댓글이 삭제되었습니다.")
                            window.location.href = '/posts/' + postId;
                        }
                ).catch((error) => {
                    console.log(error.response.data.result);
                    if (error.response.data.result["errorCode"] == "EXPIRED_TOKEN") {
                        alert("토큰이 만료되었으니 다시 로그인 해주세요");
                        window.location.href = '/users/login';
                    } else if (error.response.data.result["errorCode"] == "USER_NOT_MATCH") {
                        alert("본인이 작성한 댓글만 삭제할 수 있습니다.");
                    } else if (error.response.data.result["errorCode"] == "TOKEN_NOT_FOUND") {
                        alert("로그인 후 이용해주세요");
                        window.location.href = '/users/login';
                    } else if (error.response.data.result["errorCode"] == "INVALID_TOKEN") {
                        alert("로그인 후 이용해주세요");
                        window.location.href = '/users/login';
                    } else {
                        alert("문제가 발생했습니다. 에러가 계속된다면 관리자에게 문의해주세요");
                    }
                });
            }
        },

        /** 좋아요 클릭 **/
        likeCreate: function () {

            let postId = document.querySelector(`#input-postId`).value;
            const data = null;
            const con_check = confirm("좋아요를 누르시겠습니까?");
            const url = "/api/v1/posts/" + postId + "/likes";
            if (con_check === true) {
                axios.post(url, data, {
                            headers: {
                                'Content-Type': 'application/json',
                                'Authorization': `Bearer ${localStorage.getItem("token")}`
                            }
                        }
                ).then((response) => {
                            console.log(response);
                            window.location.href = '/posts/' + postId;
                        }
                ).catch((error) => {
                    console.log(error.response.data.result);
                    console.log(error.response)
                    console.log(url);
                    if (error.response.data.result["errorCode"] == "EXPIRED_TOKEN") {
                        alert("토큰이 만료되었으니 다시 로그인 해주세요");
                        window.location.href = '/users/login';
                    } else if (error.response.data.result["errorCode"] == "INVALID_TOKEN") {
                        alert("로그인 후 이용해주세요");
                        window.location.href = '/users/login';
                    } else if (error.response.data.result["errorCode"] == "TOKEN_NOT_FOUND") {
                        alert("로그인 후 이용해주세요");
                        // window.location.href = '/users/login';
                    } else if (error.response.data.result["errorCode"] == "FORBIDDEN_ADD_LIKE") {
                        alert("좋아요는 한번만 입력할 수 있습니다.");
                        window.location.href = '/posts/' + postId;
                    } else {
                        alert("문제가 발생했습니다. 에러가 계속된다면 관리자에게 문의해주세요");
                    }
                });
            }
        }
    };

    main.init();

</script>
