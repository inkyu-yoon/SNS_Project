{{>layouts/header}}
<div>
    {{#post}}
        <input type="hidden" name="id" value="{{id}}" id="input-postId"/>
        <body>

        <form class="container">


            <ul class="list-group">
                <li class="list-group-item active" aria-current="true">{{id}}. {{title}}</li>

                <li class="list-group-item"> 작성자 : {{userName}}</li>

                {{#isModified}}
                    <li class="list-group-item"> 작성일자 : {{lastModifiedAt}}  {{isModified}}</li>
                {{/isModified}}
                {{^isModified}}
                    <li class="list-group-item"> 작성일자 : {{createdAt}}</li>
                {{/isModified}}
                <hr>

                <li class="list-group-item">  {{body}}</li>
                <br>

            </ul>

            <hr>

            </tbody>
            </table>
        </form>


        <br>
        <br>

        <div align="center">

            <div style="display: inline-block">
                <form class="container" form action="/posts/modify/{{id}}" method="get">
                    <button type="submit" class="btn btn-primary btn-lg">게시글 수정</button>
                </form>
            </div>

            <br>
            <br>

            <div style="display: inline-block">
                <form class="container">
                    <button type="button" class="btn btn-danger btn-lg" id="post-delete-btn" >게시글 삭제</button>
                </form>
            </div>
        </div>


        <div align="center">
            <form class="container" form action="/posts" method="get">
                <br>
                <button class="btn btn-success btn-lg" type="submit" style="width: 25%">게시글 전체 조회</button>
            </form>
        </div>
        </body>
    {{/post}}
</div>



<Script>
    // post 객체 생성
    let post = {
        // 초기화(이벤트 등록) 메소드
        init: function () {

            var _this = this;

            // 버튼 클릭 시 createBtn 이 생성됨
            // querySelector 는 id를 기준으로 값을 가져온다.
            const createBtn = document.querySelector('#post-delete-btn');

            // 생성 버튼 클릭 시, 동작 할 메소드를 연결
            createBtn.addEventListener('click', _this.create);
        },


        create: async function () {
            // form 데이터를 JSON으로 만듬

            let postId = document.querySelector(`#input-postId`).value;
            // data 객체를 만든다. 일종의 dto 객체 형식으로 만드는 것과 비슷한 느낌이다.

            // 데이터 생성 요청을 보냄
            const response = await axios.delete("/api/v1/posts/" + postId, { // dto 처럼 만든 객체 data를 stringify 함수로 JSON 형식으로 만든다.
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': `Bearer ${localStorage.getItem("token")}`
                        }
                    }
            ).then((response) => {
                        console.log(response);
                        alert("게시글이 삭제되었습니다.")
                        window.location.href = '/posts' ;
                    }
            ).catch((error) => {
                console.log(error.response.status);
                if (error.response.status == 401) {
                    alert("작성자와 삭제 요청자가 일치하지 않습니다.");
                    window.location.href = '/posts/';
                }
            });

            console.log(response);
        }
    };
    // 객체 초기화
    post.init();
</script>