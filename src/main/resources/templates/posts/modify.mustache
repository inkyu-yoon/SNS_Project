{{>layouts/header}}
{{#post}}
    <form class="container">

        <input type="hidden" name="id" value="{{id}}" id="input-postId"/>
        <div class="mb-3">
            <label class="form-label">게시글 제목</label>

            <textarea class="form-control" rows="1" name="title" id="input-title">{{title}}</textarea>
        </div>

        <div class="mb-3">
            <label class="form-label">게시글 내용</label>
            <textarea class="form-control" rows="10" name="body" id="input-body">{{body}}</textarea>

        </div>

        <div class="d-grid gap-2 col-6 mx-auto">
            <button type="button" class="btn btn-primary" id="post-modify-btn">수정</button>
        </div>

    </form>
{{/post}}


<Script>
    // post 객체 생성
    let post = {
        // 초기화(이벤트 등록) 메소드
        init: function () {

            var _this = this;

            // 버튼 클릭 시 createBtn 이 생성됨
            // querySelector 는 id를 기준으로 값을 가져온다.
            const createBtn = document.querySelector('#post-modify-btn');

            // 생성 버튼 클릭 시, 동작 할 메소드를 연결
            createBtn.addEventListener('click', _this.create);
        },


        create: async function () {
            // form 데이터를 JSON으로 만듬

            let postId = document.querySelector(`#input-postId`).value;
            // data 객체를 만든다. 일종의 dto 객체 형식으로 만드는 것과 비슷한 느낌이다.
            let data = {
                title: document.querySelector('#input-title').value.trim(),
                body: document.querySelector('#input-body').value,
            };
            console.log(data);

            if (data.title == null || data.title == "") {
                alert('제목이 비어있습니다. 입력해주세요.');
                return;
            }
            if (data.body == null || data.body == "") {
                alert('내용이 비어있습니다. 입력해주세요.');
                return;
            }
            // 데이터 생성 요청을 보냄
            const response = await axios.put("/api/v1/posts/" + postId,
                    JSON.stringify(data), { // dto 처럼 만든 객체 data를 stringify 함수로 JSON 형식으로 만든다.
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': `Bearer ${localStorage.getItem("token")}`
                        }
                    }
            ).then((response) => {
                        console.log(response);
                        window.location.href = '/posts/' + postId;
                    }
            ).catch((error) => {
                console.log(error.response.status);
                if (error.response.data.result["errorCode"] == "EXPIRED_TOKEN") {
                    alert("토큰이 만료되었으니 다시 로그인 해주세요");
                    // window.location.href = '/posts/';
                }else if(error.response.data.result["errorCode"] =="USER_NOT_MATCH"){
                    alert("본인이 작성한 게시글만 수정할 수 있습니다.");
                }else if(error.response.data.result["errorCode"] =="INVALID_TOKEN"){
                    alert("로그인 후 이용해주세요");
                }
                    window.location.href = '/posts/';
            });

            console.log(response);
        }
    };
    // 객체 초기화
    post.init();
</script>