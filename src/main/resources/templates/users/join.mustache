{{>layouts/header}}
<br>
<br>
<br>
<br>
<br>


<form class="container">
    <div class="form-group" align="center">
        <label for="title"><h2><strong>회원 명</strong></h2></label>
        <input name="userName" type="text" class="form-control" id="input-userName" placeholder="회원명을 입력하세요">
    </div>
    <br>
    <br>
    <br>

    <div class="form-group" align="center">
        <label for="content"><h2><strong>비밀번호</strong></h2></label>
        <input name="password" class="form-control" id="input-password" placeholder="비밀번호를 입력하세요">
    </div>
    <br>
    <div align="center">
        <button type="button" class="btn btn-primary" id="user-create-btn">회원가입</button>

    </div>
</form>

<br>
<br>

<div align="center">
    <form class="container" form action="/" method="get">
        <br>
        <button class="btn btn-success btn-lg" type="submit" style="width: 25%">홈 화면으로</button>
    </form>
</div>

<Script>
    // user 객체 생성
    let user = {
        // 초기화(이벤트 등록) 메소드
        init: function () {

            var _this = this;

            // 버튼 클릭 시 createBtn 이 생성됨
            // querySelector 는 id를 기준으로 값을 가져온다.
            const createBtn = document.querySelector('#user-create-btn');

            // 생성 버튼 클릭 시, 동작 할 메소드를 연결
            createBtn.addEventListener('click', _this.create);
        },


        create: function () {
            // form 데이터를 JSON으로 만듬

            // data 객체를 만든다. 일종의 dto 객체 형식으로 만드는 것과 비슷한 느낌이다.
            let data = {
                userName: document.querySelector('#input-userName').value.trim(),
                password: document.querySelector('#input-password').value.trim(),
            };
            var blank_pattern = /[\s]/g;

            if (blank_pattern.test(data.userName) == true) {
                alert('회원명에 공백이 입력되었습니다. 다시 입력해주세요');
                return;
            }
            if (blank_pattern.test(data.password) == true) {
                alert('비밀번호에 공백이 입력되었습니다. 다시 입력해주세요');
                return;
            }

            // 데이터 생성 요청을 보냄
            // fetch(URL, HTTP_REQUEST)
            fetch('/api/v1/users/join', {
                method: 'POST', // POST 방식으로, HTTP 요청.
                body: JSON.stringify(data), // dto 처럼 만든 객체 data를 stringify 함수로 JSON 형식으로 만든다.
                headers: {
                    'Content-Type': 'application/json' //json 타입인 것을 설정한다.
                }
            }).then((response) => response.json())
                    .then((json) => {
                        alert(json.resultCode);
                    });
        }
    };
    // 객체 초기화
    user.init();
</script>